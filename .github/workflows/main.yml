name: CI/CD Pipeline - Link Pulse App

on:
  push:
    paths:
      - 'link-pulse-app/**'
    branches:
      - main

jobs:
  ci-cd:
    name: Test → Build → Deploy
    runs-on: ubuntu-latest

    env:
      IMAGE_TAG: ${{ github.sha }}
      CONTAINER_NAME: link-pulse-backend

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24.3'

    - name: Run All Tests in link-pulse-app
      working-directory: ./link-pulse-app
      run: go test ./test/... -v


    - name: Set up Docker
      uses: docker/setup-buildx-action@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v3
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build and Push Docker Image
      working-directory: ./link-pulse-app
      run: |
        docker build -t ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:$IMAGE_TAG .
        docker push ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:$IMAGE_TAG

    - name: Deploy to EC2
      run: |
        echo "${{ secrets.EC2_SSH_KEY }}" | base64 -d > ec2-key.pem
        chmod 600 ec2-key.pem
        ssh -o StrictHostKeyChecking=no -i ec2-key.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << EOF
          docker pull ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:$IMAGE_TAG || exit 1

          # Stop and remove old container
          docker stop $CONTAINER_NAME || true
          docker rm $CONTAINER_NAME || true

          # Start new container
          docker run -d --name $CONTAINER_NAME -p 80:8080 ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:$IMAGE_TAG || exit 1
        EOF

    - name: Clean up key file
      run: rm -f ec2-key.pem

  failure-handler:
    if: failure()
    needs: ci-cd
    runs-on: ubuntu-latest
    steps:
      - name: Create GitHub Issue for Test or Deployment Failure
        uses: dacbd/create-issue-action@v1
        with:
          title: "CI/CD Pipeline Failed on `${{ github.sha }}`"
          token: ${{ secrets.GITHUB_TOKEN }}
          body: |
            CI/CD pipeline failed during test or deployment.
            Please check the [Actions tab](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for logs.
