name: CI/CD Pipeline - Link Pulse App

on:
  push:
    paths:
      - 'link-pulse-app/**'
    branches:
      - main

jobs:
  ci-cd:
    name: Test → Build → Deploy
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:17.4
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_pass
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      POSTGRES_USER: test_user
      POSTGRES_PASSWORD: test_pass
      POSTGRES_DB: test_db
      IMAGE_TAG: ${{ github.sha }}
      CONTAINER_NAME: link-pulse-backend

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.3'

      - name: Install golang-migrate CLI
        run: |
          curl -L https://github.com/golang-migrate/migrate/releases/download/v4.17.1/migrate.linux-amd64.tar.gz | tar xvz
          sudo mv migrate /usr/local/bin

      - name: Run DB Migrations
        working-directory: ./link-pulse-app
        run: |
          migrate -path migrations -database postgres://test_user:test_pass@localhost:5432/test_db?sslmode=disable up

        
      - name: Run All Tests in link-pulse-app
        working-directory: ./link-pulse-app
        run: go test ./test/... -v

      - name: Set up Docker
        uses: docker/setup-buildx-action@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and Push Docker Image
        working-directory: ./link-pulse-app
        run: |
          docker build -t ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:$IMAGE_TAG .
          docker push ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:$IMAGE_TAG

      - name: Deploy to EC2
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" | base64 -d > ec2-key.pem
          chmod 600 ec2-key.pem
          ssh -o StrictHostKeyChecking=no -i ec2-key.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << EOF
            set -e

            IMAGE=${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:${{ github.sha }}

            echo "✅ Stopping any container running on port 80..."
            CONTAINER_ON_80=\$(docker ps -q --filter "publish=80")
            if [ ! -z "\$CONTAINER_ON_80" ]; then
              docker stop \$CONTAINER_ON_80
              docker rm \$CONTAINER_ON_80
            fi

            echo "🧹 Removing old Docker images..."
            docker image prune -af

            echo "🔐 Logging into ECR..."
            aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | \
              docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}

            echo "📥 Pulling latest image: \$IMAGE"
            docker pull \$IMAGE

            echo "🚀 Starting new container..."
            docker rm -f link-pulse-backend || true

            docker run -d --name link-pulse-backend \
              -p 80:8080 \
              -e AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} \
              -e AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} \
              -e AWS_REGION=${{ secrets.AWS_REGION }} \
              \$IMAGE
          EOF
          rm -f ec2-key.pem


  failure-handler:
    if: failure()
    needs: ci-cd
    runs-on: ubuntu-latest
    steps:
      - name: Create GitHub Issue for Test or Deployment Failure
        uses: dacbd/create-issue-action@v1
        with:
          title: "CI/CD Pipeline Failed on `${{ github.sha }}`"
          token: ${{ secrets.GITHUB_TOKEN }}
          body: |
            CI/CD pipeline failed during test or deployment.
            Please check the [Actions tab](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for logs.
